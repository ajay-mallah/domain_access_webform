<?php

/**
 * @file
 * Primary module hooks for domain_access_webform module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\domain\DomainInterface;
use Drupal\domain_access_webform\DomainWebformEntityListBuilder;
use Drupal\domain_access_webform\DomainWebformSubmissionListBuilder;
use Drupal\domain_access_webform\DomainWebformSubmissionStorage;
use Drupal\webform\WebformEntityListBuilder;
use Drupal\webform\WebformInterface;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\webform\WebformSubmissionListBuilder;
use Drupal\webform\WebformSubmissionStorage;

/**
 * Implements hook_entity_type_alter().
 */
function domain_access_webform_entity_type_alter(array &$entity_types) {
  if ($entity_types['webform']->getListBuilderClass() == WebformEntityListBuilder::class) {
    $config_export = $entity_types['webform']->get('config_export');

    $extra_keys = [
      'domain_ids',
    ];
    // Merge the existing config export keys with the new ones.
    $entity_types['webform']->set('config_export', array_merge($config_export, $extra_keys));
    $entity_types['webform']->setListBuilderClass(DomainWebformEntityListBuilder::class);
  }

  if ($entity_types['webform_submission']->getListBuilderClass() == WebformSubmissionListBuilder::class) {
    $entity_types['webform_submission']->setListBuilderClass(DomainWebformSubmissionListBuilder::class);
  }

  if ($entity_types['webform_submission']->getStorageClass() == WebformSubmissionStorage::class) {
    $entity_types['webform_submission']->setStorageClass(DomainWebformSubmissionStorage::class);
  }
}

/**
 * Custom submit handler.
 */
function domain_access_webform_form_submit(&$form, FormStateInterface $form_state) {
  $domains = array_filter($form_state->getValue('domain_id'));
  $domain_ids = array_keys($domains);
  if ($entity = $form_state->getFormObject()->getEntity()) {
    $entity->set('domain_ids', ';' . implode(';', $domain_ids) . ';');
    $entity->save();
  }
}

/**
 * Implements hook_webform_submission_create().
 */
function domain_access_webform_webform_submission_create(WebformSubmissionInterface $entity) {
  $domain = \Drupal::getContainer()->get('domain.negotiator')->getActiveDomain();

  if (!empty($domain)) {
    $entity->set('domain_id', $domain->id());
  }
}

/**
 * Implements hook_form_alter().
 */
function domain_access_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $webform_form_ids = ['webform_submission_filter_form', 'webform_filter_form'];

  $domain_service = \Drupal::service('domain_access_webform.domain_webform');
  if (in_array($form_id, $webform_form_ids)) {
    $selected_domain = \Drupal::request()->query->get('domain');
    // Cheking if any filter is applied or not.
    $request_queries = array_keys(array_filter(\Drupal::request()->query->all()));
    $has_query = array_intersect(['search', 'category', 'state', 'domain'], $request_queries) ? TRUE : FALSE;

    $options = $domain_service->getDomainOptions();
    $form['filter']['search']['#weight'] = -5;
    $form['filter']['state']['#weight'] = -4;
    $form['filter']['domain'] = [
      '#type' => 'select',
      '#title_display' => 'hidden',
      '#title' => t('Domain'),
      '#options' => $options,
      '#default_value' => ($selected_domain && in_array($selected_domain, array_keys($options))) ? $selected_domain : NULL,
      '#weight' => -3,
    ];

    $form['filter']['reset'] = [
      '#type' => 'submit',
      '#submit' => ['::resetForm'],
      '#value' => t('Reset'),
      '#access' => $has_query,
    ];

    $form['#submit'][] = 'domain_access_webform_form_webform_submission_filter_form_submit';
  }

  if ($form_id == 'webform_settings_form_form') {
    $entity = $form_state->getFormObject()->getEntity();
    $form['third_party_settings']['#tree'] = TRUE;

    $options = $domain_service->getDomainOptions();
    unset($options['']);
    $selected_list = $entity->get('domain_ids');

    $selected_list = explode(';', $selected_list ?? '');
    array_shift($selected_list);
    array_pop($selected_list);
    $form['domain_id'] = [
      '#type' => 'checkboxes',
      '#title' => t('Domain Access'),
      '#options' => $options,
      '#default_value' => $selected_list ?? [],
    ];
    $form['actions']['submit']['#submit'][] = 'domain_access_webform_form_submit';
  }
}

/**
 * Submit handler for the domain filter field.
 */
function domain_access_webform_form_webform_submission_filter_form_submit($form, FormStateInterface $form_state) {
  if ($domain = $form_state->getValue('domain')) {
    $form_state->getRedirect()->mergeOptions([
      'query' => [
        'domain' => $domain,
      ],
    ]);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function domain_access_webform_query_domain_webform_filter_alter(AlterableInterface $query) {
  $current_user = \Drupal::currentUser();
  $domain = trim(\Drupal::request()->query->get('domain') ?? '');

  if (!$current_user->hasPermission('bypass domain access webform restrictions')) {
    $allowed_domains = \Drupal::service('domain_access_webform.domain_webform')
      ->getUserAllowedDomains($current_user);

    if ($domain) {
      if (in_array($domain, $allowed_domains)) {
        $query->condition('webform_submission.domain_id', $domain);
      }
      else {
        $query->condition('webform_submission.sid', NULL);
      }
    }
    else {
      $query->condition('webform_submission.domain_id', $allowed_domains, 'IN');
    }
  }
  elseif ($domain) {
    $query->condition('webform_submission.domain_id', $domain);
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * The domain field is required when the domain module is enabled. Otherwise
 * submissions end up on the wrong domain. This field is added as separate
 * database field for optimized querying.
 *
 * Alternative is a node_grants alternative / solution?
 */
function domain_access_webform_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'webform_submission') {
    $fields = [];
    $fields['domain_id'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Domain'))
      ->setDescription(t('The source of the submissions.'))
      ->setSettings([
        'target_type' => 'domain',
      ]);

    return $fields;
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Maps domain id on new werform create/duplicate.
 */
function domain_access_webform_webform_presave(WebformInterface $entity) {
  if ($entity->isNew() && empty($entity->get('domain_ids'))) {
    $domain = \Drupal::getContainer()->get('domain.negotiator')->getActiveDomain();
    if ($domain) {
      $entity->set('domain_ids', ';' . $domain->id() . ';');
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function domain_access_webform_views_data_alter(array &$data) {
  $data['webform_submission']['domain_webform'] = [
    'title' => t('Filter Webform Submission by domain'),
    'filter' => [
      'title' => t('Filter Webform Submission by domain'),
      'help' => t('Filters the webform submission based on the domain they are enabled for.'),
      'field' => 'sid',
      'id' => 'domain_webform_filter',
    ],
  ];
}

/**
 * Implements hook_webform_access().
 */
function domain_access_webform_webform_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $current_domain = \Drupal::getContainer()
    ->get('domain.negotiator')
    ->getActiveDomain();
  if ($operation == 'submission_page' && $current_domain instanceof DomainInterface) {
    if (!$account->hasPermission('bypass domain access webform restrictions') &&
      $allowed_domains = $entity->get('domain_ids')
    ) {
      $allowed_domains = explode(';', $allowed_domains);
      $user_allowed_domains = \Drupal::service('domain_access_webform.domain_webform')
        ->getUserAllowedDomains($account);
      return AccessResult::forbiddenIf(!array_intersect($allowed_domains, $user_allowed_domains));
    }
    elseif (!$account->hasPermission('bypass domain access webform restrictions')) {
      return AccessResult::forbidden();
    }
  }
}
